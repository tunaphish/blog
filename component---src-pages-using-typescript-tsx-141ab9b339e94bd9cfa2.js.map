{"version":3,"sources":["webpack://blog/./src/pages/using-typescript.tsx","webpack://blog/./src/components/layout.js","webpack://blog/./src/components/seo.js"],"names":["data","path","location","title","site","buildTime","href","Link","to","header","children","isRootPath","pathname","className","data-is-root-path","Date","getFullYear","Seo","description","lang","meta","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps"],"mappings":"oJA6CA,UAhCwD,SAAC,GAAD,IACtDA,EADsD,EACtDA,KACAC,EAFsD,EAEtDA,KACAC,EAHsD,EAGtDA,SAHsD,OAKtD,gBAAC,IAAD,CAAQC,MAAM,mBAAmBD,SAAUA,GACzC,gBAAC,IAAD,CAAKC,MAAM,qBACX,oEACA,qEAC2C,sCAD3C,+DAE8C,yCAF9C,wEAKA,qEAC2C,wCAD3C,oBAEM,wCAFN,gBAEsC,uCAFtC,UAIA,2DACiCF,EADjC,uBAC2D,IACxDD,EAAKI,KAAKC,UAFb,KAIA,2DACkC,IAChC,qBAAGC,KAAK,6CAAR,kCAFF,KAOA,gBAAC,EAAAC,KAAD,CAAMC,GAAG,KAAT,8B,0DCNJ,IAhCe,SAAC,GAAmC,IAG7CC,EAHYP,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOO,EAAe,EAAfA,SAE3BC,EADQ,MACKT,EAASU,SAiB5B,OAbEH,EADEE,EAEA,sBAAIE,UAAU,gBACZ,gBAAC,EAAAN,KAAD,CAAMC,GAAG,KAAKL,IAKhB,gBAAC,EAAAI,KAAD,CAAMM,UAAU,mBAAmBL,GAAG,KACnCL,GAML,uBAAKU,UAAU,iBAAiBC,oBAAmBH,GACjD,0BAAQE,UAAU,iBAAiBJ,GACnC,4BAAOC,GACP,oCACK,IAAIK,MAAOC,cADhB,mBAGE,qBAAGV,KAAK,4BAAR,c,oECjBFW,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMjB,EAAY,EAAZA,MAC9BC,GAASiB,oBAAe,cAAxBjB,KAgBFkB,EAAkBJ,GAAed,EAAKmB,aAAaL,YACnDM,EAAY,UAAGpB,EAAKmB,oBAAR,aAAG,EAAmBpB,MAExC,OACE,gBAAC,IAAD,CACEsB,eAAgB,CACdN,QAEFhB,MAAOA,EACPuB,cAAeF,EAAY,QAAWA,EAAiB,KACvDJ,KAAM,CACJ,CACEO,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAASzB,GAEX,CACE0B,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAxB,EAAKmB,oBAAL,mBAAmBO,cAAnB,eAA2BC,UAA3B,IAEX,CACEJ,KAAK,gBACLC,QAASzB,GAEX,CACEwB,KAAK,sBACLC,QAASN,IAEXU,OAAOZ,MAKfH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd","file":"component---src-pages-using-typescript-tsx-141ab9b339e94bd9cfa2.js","sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <Seo title=\"Using TypeScript\" />\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <em>.ts/.tsx</em> files for your\n      pages, components etc. Please note that the <em>gatsby-*.js</em> files\n      (like gatsby-node.js) currently don't support TypeScript yet.\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>.tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{\" \"}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        Â© {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n"],"sourceRoot":""}