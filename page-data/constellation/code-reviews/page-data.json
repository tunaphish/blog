{"componentChunkName":"component---src-templates-note-template-js","path":"/constellation/code-reviews","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Code Reviews\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"reviews protect against the natural state of entropy that code tends to fall into.\\nuse this guide to refactor and to review other's code\"), mdx(\"h1\", null, \"Gather Context\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Read the SIM\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Read the description\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Draw code diagram | envision the grand scheme of code\")), mdx(\"h1\", null, \"conventions\"), mdx(\"h2\", null, \"General\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"prefer readability over everything\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"avoid comments\\ncomments shouldn't explain what something does. the source code does this and commenting is a crutch for poor readability. if you have to have comments it should be to explain why something is the way it is.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"prefer excessive logging and metrics\\nlogging business logic is a good idea\"))), mdx(\"h2\", null, \"Package\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid Multiple responsibilities (will this package change for multiple reasons)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid Dispersed responsibilities (will a change effect multiple packages)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid YAGNI\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Inheritence \\u2192 Favor Composition\")), mdx(\"h2\", null, \"Class\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid Large classes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid coupling classes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remember Injection, Non null\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid Object Instantiation and Favor Factories or Builders\", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Implementation need not exist at compile time (???)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Vary return type based on inputs Compact API\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Return type can be subtyped eg Return a different type of Enum based on size\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Is named eg getInstance()\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Control instance creation eg object pools\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Minimize Accessibility of Classes\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Design a minimal public API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reduce accessibility of internals as much as possible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Benefits\")), mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Change structure however you like\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Minimize APIs you have to maintain\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Decoupling = develop|test|modify in parallel\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Decrease risk of building large systems\")))), mdx(\"h2\", null, \"Function\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid Pointless Indirection\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"prefer defensive programming, validate inputs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"prefer smaller parameter sizes\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"try more methods that use different parameters\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"try helper methods that encompass the parameter list\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"try parameter objects\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"prefer interfaces in params over classes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"avoid side effects and mutations\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Anything that returns a value should have no observable side effects!\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"return defensive copies\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid Flag Parameters\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid Optionals\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Prefer Method References > Lambdas > Anonymous Classes\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lambdas essentially do the job of anonymous classes but with a lot less boilerplate.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Method references should be used over lambdas. They provide a bit more documentation and are generally less verbose. This isn't always the case however.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"avoid varargs for performance issues\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use optionals to force clients to deal with missing data\")), mdx(\"h2\", null, \"Data\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"avoid global data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"avoid strings over more precise datatypes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"prefer immutability\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"avoid primitive\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"avoid clumps (data that tends to appear together but not grouped)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"avoid ethereal (temporary)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"avoid chaining (person.name.last)\")), mdx(\"h2\", null, \"Exception Handling\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Favor Try with Resources\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"avoid exceptions over conditions (performance)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use Checked Exceptions for Recoverable States and Unchecked for Programming Errors\")), mdx(\"h2\", null, \"Style\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid Switches or Loops and prefer functional programming\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"avoid (complex) conditionals\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"try early exits\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"try strategy pattern\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"try special case object pattern\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Resources\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Clean Code - Robert Martin\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Effective Java - Joshua Bloch\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Refactoring - Martin Fowler\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"code-reviews","frontmatter":{"title":"Code Reviews"},"excerpt":"reviews protect against the natural state of entropy that code tends to fall into. \nuse this guide to refactor and to review other's codeâ€¦","inboundReferences":[],"outboundReferences":[]}},"pageContext":{"slug":"code-reviews"}},"staticQueryHashes":["3000541721"]}