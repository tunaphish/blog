{"componentChunkName":"component---src-templates-note-template-js","path":"/constellation/you-are-not-going-to-need-it","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"YAGNI\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"An engineering principal meant to prevent overengineering a code base. The idea that you don't need to write code anticipating future use cases. Sometimes you don't need a strategy pattern. Sometimes you just need an if statement. Could be a good life philosophy as well lol.  \"), mdx(\"p\", null, \"counterpoint is a good software architect should be able to identify volatility aka the times you are in fact going to need it. \"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"you-are-not-going-to-need-it","frontmatter":{"title":"YAGNI"},"excerpt":"An engineering principal meant to prevent overengineering a code base. The idea that you don't need to write code anticipating future useâ€¦","inboundReferences":[{"frontmatter":{"title":"Software Architect"},"slug":"software-architect"}],"outboundReferences":[]}},"pageContext":{"slug":"you-are-not-going-to-need-it"}},"staticQueryHashes":["3000541721"]}