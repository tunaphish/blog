{"componentChunkName":"component---src-templates-note-template-js","path":"/constellation/software-architect","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Software Architect\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"considerations when designing\"), mdx(\"p\", null, \"industry standard unless you have a reason not to\"), mdx(\"h1\", null, \"software architect's role\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"minimize effort to build and maintain software\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"predict and allow for change (software changes over it's lifetime)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"defend the architecture\")), mdx(\"h1\", null, \"goals for architecture\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"use cases \\u2192 architecture screams it's purpose, it is clearly what it's intended to portray\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"operation \\u2192 can handle hardware operations and future ones\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"development \\u2192 architecture often reflects organizational structure. this is to faciliate multiple teams working independently\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"deployment \\u2192deployed right after being built\")), mdx(\"h1\", null, \"Foundations of Architecture\"), mdx(\"p\", null, \"The difference between good and bad architecture\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"defects\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"maintainability\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"resources required\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"customer trust, manager wrath, team morale\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"effort to change\")), mdx(\"h1\", null, \"Architecture Requirements\"), mdx(\"h3\", null, \"reliability\"), mdx(\"p\", null, \"work through faults (hardware, human, software)\"), mdx(\"h3\", null, \"scalability\"), mdx(\"p\", null, \"load \\u2192 TPS, read/write, throughput\\nperformance \\u2192\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"how it degrades with increased load and resources kept the same\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"how it stays the same with increased load and resources increased\")), mdx(\"h3\", null, \"maintainability\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"operability\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"simplicity\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"evolvability\")), mdx(\"h3\", null, \"volatility\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"what is most likely to change?\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"how do you allow for it \")), mdx(\"h1\", null, \"Systems\"), mdx(\"h2\", null, \"1. clean architecture\"), mdx(\"p\", null, \"Their general plan for a clean architecture\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Dependency Rule \\u2192 source code dependencies must point only inward, towards higher lvl policies.\")), mdx(\"p\", null, \"Code is separated into four layers\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Entities\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use cases\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Interface adapters (controllers presenters adapters)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Frameworks and tools (web ui db devices)\")), mdx(\"h2\", null, \"2. create plugin architecture\"), mdx(\"p\", null, \"layers, especially lower ones should be hot swappable\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Service\"), mdx(\"h2\", null, \"Dependency Injection > Hard Coding Resources\"), mdx(\"p\", null, \"Flexibility \\u2192 Use different resources\\nTestability \\u2192 Easier Mocking\\nReusability \\u2192 More generic components\"), mdx(\"h3\", null, \"Package Organization\"), mdx(\"p\", null, \"Horizontal - Doesn't scream architecture.. looks like anything else\\nVertical - Leaves Potentential to skip layers\\nComponent - persistence and business logic are combined\"), mdx(\"h3\", null, \"Separation of Concerns\"), mdx(\"p\", null, \"Object orientated Programming\"), mdx(\"h3\", null, \"Functions\"), mdx(\"p\", null, \"Functional Programming\"), mdx(\"h3\", null, \"Data Management\"), mdx(\"p\", null, \"Structural Programming\"), mdx(\"h2\", null, \"Screaming architecture\"), mdx(\"p\", null, \"Your architecture should plainly state its use cases.\"), mdx(\"p\", null, \"Not the framework. Not the database. Not the delivery system. It should be about the use cases. You should be able to defer those decisions.  Someone should be able to look at the source and base directory and immediately say oh this is an rpg or this is a an inventory system. \"), mdx(\"p\", null, \"Testable without knowledge of database or delivery system. \"), mdx(\"h2\", null, \"Defining Partial Partial Boundaries\"), mdx(\"p\", null, \"As an architect you are often going to run into \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/constellation/you-are-not-going-to-need-it\",\n    \"title\": \"you-are-not-going-to-need-it\"\n  }, \"you-are-not-going-to-need-it\"), \" But it's your job to think... I might need it. This need evolves overtime and with business needs.\\nRestrict volatility on things that don\\u2019t matter. This is where experience comes in handy. You can tell what doesn\\u2019t matter.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Design a service as if they were two. But deploy them in the same package. That way you can easily separate. \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"One way boundaries. \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Facades \\u2192 A client calls a class which just serves to call other classes that the client never has access to. There\\u2019s still a transitive dependency however though. The boundary is very weak. \")), mdx(\"h2\", null, \"Component (Package) Cohesion\"), mdx(\"p\", null, \"Three Guiding Principles (They push and pull against each other)\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"CCP \\u2192 Group things that are likely to change at the same time for same reason\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"CRP \\u2192 split classes that will make callers depend on things they don't need\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"REP \\u2192 granule of reuse is the same as granule of release\")), mdx(\"hr\", null), mdx(\"h1\", null, \"data decisions\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Effective data models are not even slightly clever - Will Larson (Staff Engineer)\")), mdx(\"p\", null, \"Are you focusing on transactions or analytics on your data?\"), mdx(\"p\", null, \"When looking at your encoded data (data in transition, through network or saved to state like json, and xml) focus on evolvability. Is it backwards and fowards compatible?\"), mdx(\"p\", null, \"Old application code can accidentally overwrite database properties it doesn't recognize if it just ignores them!!\"), mdx(\"h2\", null, \"intrinsic vs extrinsic properties\"), mdx(\"p\", null, \"when you think about data are properties intrinsic or extrinsic\\nis it core to the object or external\"), mdx(\"p\", null, \"example\\nintrisic, car is red, couple, fast\\nextrinsic, car's owner, location\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Class\"), mdx(\"h2\", null, \"SOLID Principles\"), mdx(\"p\", null, \"Single Responsibility Principle - classes should change only because of one actor\"), mdx(\"p\", null, \"Open Closed Principle - classes should be open to addition... not to modification\"), mdx(\"p\", null, \"Liskov Substitution Principle - Things should be substituble without worry\"), mdx(\"p\", null, \"Interface Segragation Principle - don't combine things people don't need\"), mdx(\"p\", null, \"Dependency Inversion Principle\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Don't rely on concrete implementations\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Don't derive from concrete implementations\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Don't override concrete functions\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Don't mention name of anything concrete\")), mdx(\"hr\", null), mdx(\"h1\", null, \"technical writing design documents\"), mdx(\"h2\", null, \"the base formula\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"problems\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"options\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"solution\")), mdx(\"h2\", null, \"general tips\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Emphasize clarity of thought and substance\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid weasel words and passive action (use active verbs instead) \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/constellation/allow-yourself-to-be-vulnerable\",\n    \"title\": \"allow-yourself-to-be-vulnerable\"\n  }, \"allow-yourself-to-be-vulnerable\"), \" and assert yourself\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lead w/ proposal and then lead through journey\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Visualizations are great like sequence diagrams\")), mdx(\"h2\", null, \"sample six pager\"), mdx(\"p\", null, \"Use Cases \\u2192 Tech Requirements \\u2192 Key Tech Decisions \\u2192 Approaches \\u2192 Trade offs\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Purpose \", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use to narrow scope\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Emphasize BRD\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create functional requirements (intrinsic requirements)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Additional Constraints including current state of world\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Tenants \", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"used to guide decision points\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Situation\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Recommendation\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Implementation Plan\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Appendices\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"software-architect","frontmatter":{"title":"Software Architect"},"excerpt":"considerations when designing industry standard unless you have a reason not to software architect's role minimize effort to build and…","inboundReferences":[],"outboundReferences":[{"frontmatter":{"title":"YAGNI"},"slug":"you-are-not-going-to-need-it"},{"frontmatter":{"title":"Allow yourself to be Vulnerable"},"slug":"allow-yourself-to-be-vulnerable"}]}},"pageContext":{"slug":"software-architect"}},"staticQueryHashes":["3000541721"]}